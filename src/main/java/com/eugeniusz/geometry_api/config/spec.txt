package com.eugeniusz.geometry_api.service;
import com.eugeniusz.geometry_api.api.ShapePageRequest;
import com.eugeniusz.geometry_api.api.exceptions.ShapeNotFoundException;
import com.eugeniusz.geometry_api.dto.post.ShapeCreateRequest;
import com.eugeniusz.geometry_api.factory.create.ShapeFactory;
import com.eugeniusz.geometry_api.model.shape.Shape;
import com.eugeniusz.geometry_api.repository.ShapeRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
@Service
@RequiredArgsConstructor
@FieldDefaults(makeFinal = true, level = lombok.AccessLevel.PRIVATE)
public class ShapeService {

    ShapeRepository repository;

    public Shape save(ShapeCreateRequest request) {
        return repository.save(ShapeFactory.createShape(request))}
    public Page<Shape> getAllBy(ShapePageRequest request) {
//        Pageable pageable = request.getShapePage();//getPage().toPageable();
        return null;}
    public void deleteById(Long id) throws ShapeNotFoundException {
        if(!repository.existsById(id))
            throw new ShapeNotFoundException(id);
        repository.deleteById(id);
    }
    @Transactional
    public Shape update(Long id, ShapeCreateRequest request) {
        if(!repository.existsById(id))
            throw new ShapeNotFoundException(id);
        else
            return ShapeFactory.updateShape(
                    request,
                    repository.findById(id).orElseThrow(() -> new ShapeNotFoundException(id)));}
    public Shape getById(Long id) {
        return repository.findById(id).orElseThrow(() -> new ShapeNotFoundException(id));
    }}
    package com.eugeniusz.geometry_api.api;
    import com.eugeniusz.geometry_api.dto.post.ShapeCreateRequest;
    import com.eugeniusz.geometry_api.model.shape.Shape;
    import com.eugeniusz.geometry_api.service.ShapeService;
    import io.swagger.v3.oas.annotations.Operation;
    import jakarta.validation.Valid;
    import lombok.RequiredArgsConstructor;
    import lombok.experimental.FieldDefaults;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.data.domain.Page;
    import org.springframework.web.bind.annotation.*;
    import static org.springframework.http.HttpStatus.*;
    @RestController
    @RequestMapping("/api/v1/shapes")
    @RequiredArgsConstructor
    @Slf4j
    @FieldDefaults(makeFinal = true, level = lombok.AccessLevel.PRIVATE)
    public class ShapeEndpoint {
        ShapeService shapeService;
        @Operation(summary = "Retrieve shapes from database by criteria")
        @GetMapping
        @ResponseStatus(PARTIAL_CONTENT)
        Page<Shape> getAll(@ModelAttribute ShapePageRequest request) {
            return shapeService.getAll(request);
        }}
        package com.eugeniusz.geometry_api.model.shape;
        import jakarta.persistence.*;
        import lombok.*;
        import lombok.experimental.FieldDefaults;
        import lombok.experimental.SuperBuilder;
        import org.hibernate.annotations.GenericGenerator;
        import org.springframework.data.annotation.CreatedBy;
        import org.springframework.data.annotation.CreatedDate;
        import org.springframework.data.annotation.LastModifiedBy;
        import org.springframework.data.annotation.LastModifiedDate;
        import org.springframework.data.jpa.domain.support.AuditingEntityListener;
        import java.math.BigDecimal;
        import java.time.LocalDateTime;
        @SuperBuilder
        @Getter
        @Setter
        @NoArgsConstructor
        @ToString
        @FieldDefaults(level = AccessLevel.PRIVATE)
        @EqualsAndHashCode(onlyExplicitlyIncluded = true)
        @EntityListeners(AuditingEntityListener.class)
        @Entity
        @Inheritance(strategy = InheritanceType.JOINED)
        public abstract class Shape  {
            @Id
            @GeneratedValue(strategy = GenerationType.AUTO)
            @EqualsAndHashCode.Include
            Long id;
            BigDecimal area;
            BigDecimal perimeter;
            @Enumerated(EnumType.STRING)
            @Column(insertable = false, updatable = false)
            ShapeType type;
            @Version
            Integer version;
            @CreatedBy
            String createdBy;
            @CreatedDate
            LocalDateTime createdAt;
            @LastModifiedDate
            LocalDateTime lastModifiedAt;
            @LastModifiedBy
            String lastModifiedBy;
            public BigDecimal calculateArea(){
                return BigDecimal.ZERO;
            };
            public BigDecimal calculatePerimeter(){
                return BigDecimal.ZERO;
            }}



